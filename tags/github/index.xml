<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on Effectiveさお</title>
    <link>https://h-sao.com/tags/github/</link>
    <description>Recent content in Github on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 03 Aug 2022 16:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://h-sao.com/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Git] </title>
      <link>https://h-sao.com/blog/2022/08/03/add-gitlfs-file/</link>
      <pubDate>Wed, 03 Aug 2022 16:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/08/03/add-gitlfs-file/</guid>
      <description>バイナリファイルコミットしちゃたけど、これ Git LFS 管理対象にしたかったよねー。。。
というときの作業メモです
わたしの環境は Windows での動作確認になります
 git lfs install で Git LFS をインストールします
わたしの環境にはすでに入っていたみたい…  &amp;gt;git lfs install Updated Git hooks. Git LFS initialized.   git lfs version でバージョンを確認しておく  &amp;gt;git lfs version git-lfs/3.2.0 (GitHub; windows amd64; go 1.18.2)   git lfs track とすると、.gitattributes に格納されている対象データの情報が見れます  例えばこんな感じ
&amp;gt;git lfs track Listing tracked patterns *.dll (.gitattributes) *.exe (.gitattributes) Listing excluded patterns   git lfs track でLFS管理に入れたいファイルを指定します  &amp;gt;git lfs track &amp;quot;*.</description>
    </item>
    
    <item>
      <title>[Hugo] GitHub Actionsでサイトを自動デプロイしたときにCNAMEを残す方法</title>
      <link>https://h-sao.com/blog/2022/03/24/how-to-support-hugo-auto-deploy-to-cname-when-using-github-actions/</link>
      <pubDate>Thu, 24 Mar 2022 15:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/03/24/how-to-support-hugo-auto-deploy-to-cname-when-using-github-actions/</guid>
      <description>Hugo に限らないのですが
gh-pages ブランチを利用して GitHub Pages を作った時
自動デプロイで、独自ドメインの設定を記載した CNAME が消えちゃうことがあります
そのトラブルシュートについてです
Hugo 自体の設定もあるのですが、それよりも
元のコンテンツに CNAME ファイルを含めてしまうのがシンプルで簡単です
Hugo ならメインブランチの static ディレクトリ以下に CNAME を設置します
これだけでOK！</description>
    </item>
    
    <item>
      <title>[Git] フォーク元のリポジトリに追いつきたいときメモ</title>
      <link>https://h-sao.com/blog/2022/02/27/how-to-update-fork-repository-on-git/</link>
      <pubDate>Sun, 27 Feb 2022 01:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/02/27/how-to-update-fork-repository-on-git/</guid>
      <description>よくフォークしたリポジトリを最新化する方法を忘れては検索を繰り返してるので、いい加減自分のブログにメモしておきます
最初の fork 以降、フォーク元のリポジトリに追いつきたいときのお話です
1. 自分のローカルのリポジトリに登録されているリモート情報を見てみる 1  $ git remote -v   わたしの実行結果はこんな感じ、まだフォーク元との関連はなし
1 2 3  $ git remote -v origin	https://github.com/h-sao/xxx.git (fetch) origin	https://github.com/h-sao/xxx.git (push)   2. フォーク元のURLを upstream に登録します （フォーク元は zzz/xxx という名前で公開されている場合です）
1  $ git remote add upstream https://github.com/zzz/xxx.git   ちゃんと登録されてるかどうかは、さっきの git remote -v で確認します
1 2 3 4 5  $ git remote -v origin	https://github.com/h-sao/xxx.git (fetch) origin	https://github.com/h-sao/xxx.git (push) upstream	https://github.</description>
    </item>
    
    <item>
      <title>[Github] Github Actionsでブログを更新するようにしました</title>
      <link>https://h-sao.com/blog/2020/09/28/using-githubactions-for-blog/</link>
      <pubDate>Mon, 28 Sep 2020 12:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2020/09/28/using-githubactions-for-blog/</guid>
      <description>元々、このブログは hugo で作った静的HTMLを wercker でオートデプロイして作っていました
だけど wercker は設定の変更が多くてすぐにデプロイ出来なくなっていたんですよね~で、辞めました
これを作った当時は wercker がイケイケドンドンだったので
CircleCI から乗り換える人も多かったのですが
今となってはカジュアルデプロイは CircleCI …いやいや Github Actions があるやないか！
ということで、 Github Actions でデプロイするようにしてみました
Github Actions の設定ON ここをポチっと押すと、Actionsの設定画面へ
Github Actions の設定ファイルを書いてみる 知識なしで初めてみましたが、すんなり簡単にビルド＆デプロイすることが出来ました
というのも、GitHub Actions for GitHub Pages というデプロイするためのオールインワンアクションを公開してくれている方がいらっしゃいました
設定ファイルをまんま真似するだけで使えます
 https://github.com/peaceiris/actions-gh-pages  そしてこの方、hugo 対応のアクションも公開して下さっています！
 https://github.com/peaceiris/actions-hugo  ここの例に書いてる yaml ファイルのまんまで良い感じにデプロイ出来ました
こんな感じ↓↓↓
 https://github.com/h-sao/h-sao.com/blob/master/.github/workflows/actions.yml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  # This is a basic workflow to help you get started with Actions name: Deploy Github Pages to Hugo # Controls when the action will run.</description>
    </item>
    
    <item>
      <title>[GitHub Pages] カスタムドメインのDNS情報を更新する</title>
      <link>https://h-sao.com/blog/2020/02/25/how-to-change-dnsinfo-for-github-custom-domain/</link>
      <pubDate>Tue, 25 Feb 2020 12:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2020/02/25/how-to-change-dnsinfo-for-github-custom-domain/</guid>
      <description>去年、2019年の4月くらいから
GitHub Pages にファイルをアップすると、ワーニングが出るようになった
内容はこんなやつ
1 2 3 4 5 6 7 8 9 10 11  Title: [h-sao/h-sao.com] Page build warning The page build completed successfully, but returned the following warning for the `gh-pages` branch: The custom domain for your GitHub Pages site is pointed at an outdated IP address. You must update your site&amp;#39;s DNS records if you&amp;#39;d like it to be available via your custom domain. For more information, see https://help.</description>
    </item>
    
    <item>
      <title>[GitHub] GitHubリポジトリを別アカウントに移動させる</title>
      <link>https://h-sao.com/blog/2016/07/20/transfer-github-repository/</link>
      <pubDate>Wed, 20 Jul 2016 20:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/07/20/transfer-github-repository/</guid>
      <description>旧 Github Micro Plan では、プライベートリポジトリは5つまでしか持てませんでしたが
最近は Presonal Plan に変更されて、リポジトリ制限数が無制限になりましたね
 GitHub価格ページ
https://github.com/pricing  それを受けて、手元で持っている複数の Micro Plan アカウントを、一つのアカウントにまとめる作業を行いました
あるGithubのリポジトリを別アカウントに移管する、という意味になります
 移動元個人アカウント(XXX)のリポジトリ(X-REPO)
↓
移動先個人アカウント(YYY)
 ドキドキしたけど、結構すんなり出来たので、別にドキドキする必要なかった(^^;)
とはいえ、わたしの様な小心者が、他にもいらっしゃるかもしれないので
（あと、忘れた頃の未来の自分のため^^;）
手順を詳細に載せときます
GiuHub上での操作(移動元)  移動元(XXX)のアカウントで GitHub にログインします
 移動元(XXX)のGitHubのリポジトリ(X-REPO)の Settings＞ Options に行きます
 一番下に Denger Zone があるので、そこの Transfer をクリックして、移動させます
（まだ、いきなりは移動しないよ）
 移動元(XXX)のリポジトリ名(X-REPO)、移動先のアカウント名(YYY) を入力します
これで、リポジトリを移動させる準備が出来ました
 移動元リポジトリ(X-REPO)は、移動先アカウント(YYY)の許可待ち状態になります
この状態であれば、Abort transferを押して、まだ移管を取り消すことが出来ますね！
  その後、移動先アカウント(YYY)にメールが届く  こんなメールが移動先アカウント(YYY)に届きます  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  ＜タイトル＞ [GitHub] Repository transfer from @XXX (XXX/X-REPO) ＜内容＞ Hello YYY, @XXX wants to transfer the XXX/X-REPO repository to YYY/X-REPO.</description>
    </item>
    
    <item>
      <title>[Git] Gitで利用するsshキーペアの作成、ssh接続、複数ID接続</title>
      <link>https://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</link>
      <pubDate>Sat, 07 May 2016 15:23:30 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</guid>
      <description>しょっちゅう作っては、作り方を忘れ、また検索で調べる…ということをしているので、sshキーの生成&amp;amp;接続について、忘れないようにメモしておきます
GitサーバへSSHキーを使って接続したい Gitサーバに接続するには、
 http ssh  この2種類の接続方法があるみたいです
Git接続用のクライアントアプリは、どっちで接続するか選択できるものもあるので
Sourcetreeなどを使っていると、あまり認識してない人もいるかもしれません
今回、こんなクライアント環境で試しました
 自端末：Windows10 x64 Gitサーバ：GitHub Gitクライアントアプリ：GitExtensions Gitアクセスには、複数アカウントを利用している  これを試そうと思ったモチベーションは、push のたびに IDとパスワードを毎回聞かれるのがやだ、だからキーペアを利用して ssh アクセスにするんだー
というところから始まってます
GitHub のIDとパスワードをスキップして、セキュアアクセスするのだ！という方の参考になればと思います！
 あと、番外編として、 非推奨ですが https アクセスでIDとパスワードを毎回聞かれないようにする方法も最後にメモしておきます
 キーの生成方法 ssh-keygen ここは普通に
公開鍵と秘密鍵を作ればいいだけなので、知ってる人に取ったら何をいまさら…になりますが、一応メモ
Gitがインストールされているなら ssh-keygen が使えますので、コマンドを打つだけ
(コマンドを打たなくても、Gitのクライアントアプリが勝手にやってくれる場合もあります)
GitBash などを起動します
コマンドはこちら
$ ssh-keygen -t rsa  基本的には、何か聞かれてもエンターで進めばOKです
デフォルトでは c:\Users\[ユーザ名]\.ssh\** 以下に秘密鍵（id_rsa）と公開鍵（id_rsa.pub）**のキーペアが作成されます
Windowsだとキーの保存位置は c:\Users\[ユーザ名]\.ssh\ にしないといけません
わたしは、Github用のキーだと判るように、名前を github_rsa として作成しました
（既に別の用途で id_rsa を使っているからです、つまり複数アカウントを利用しています）
実行結果はこれ↓↓↓
(SHA256以下の箇所は、適当に x で書き換えています) haruka.sao@MyPC MINGW64 ~ $ ssh-keygen -t rsa Generating public/private rsa key pair.</description>
    </item>
    
  </channel>
</rss>