<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp on Effectiveさお</title>
    <link>https://h-sao.com/tags/cpp/</link>
    <description>Recent content in Cpp on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 08 Mar 2022 15:30:00 +0900</lastBuildDate>
    
	<atom:link href="https://h-sao.com/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[C&#43;&#43;] Windowsの空のアプリケーションを作る手順メモ</title>
      <link>https://h-sao.com/blog/2022/03/08/how-to-create-blank-windows-app/</link>
      <pubDate>Tue, 08 Mar 2022 15:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/03/08/how-to-create-blank-windows-app/</guid>
      <description>いつもどうやったっけな？と思って同じ過ちを繰り返してるのでメモ
環境:
Visual Studio 2022
作りたいソリューション
 C++プロジェクト ブランクプロジェクト Windowsデスクトップアプリケーション（コンソールではない！）  いつもわたし、空のプロジェクトを作りたいからといって
Empty Project を選んでしまうのです…
すると、コンソールベースの exe を作るソリューションになってしまいます
ちゃうねん、これちゃうねん！
Windowアプリの空のソリューションを作りたい場合はこれ
 Create a new project Windows Desktop Wizard を選択 Configure your new project で名前を入れて次に進む Windows Desktop Project で Desktop Application (.exe) を選択 更に Empty project にチェックを入れる これで OK を押せば、よし！  これこれ、、、これやねん。。。</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] ラムダのパラメータリスト()が省略できるようになった</title>
      <link>https://h-sao.com/blog/2022/02/19/cpp23-lambda/</link>
      <pubDate>Sat, 19 Feb 2022 09:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/02/19/cpp23-lambda/</guid>
      <description>この記事は meetup app osaka@6 の参加記事です。
 C++23 でタイトルの通り、パラメータリストのカッコが省略できるようになりました
 Make () more optional for lambdas
http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p1102r2.html  gccなら12以上、Clangは14以上で動作するようです
1 2 3 4  [=] // () // mutable 書いてても省略可能に！ mutable {}    (もう少し追記するとおもいますが、今はこれで…)</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] HackerRank始めました</title>
      <link>https://h-sao.com/blog/2022/01/30/start-hackerrank/</link>
      <pubDate>Sun, 30 Jan 2022 12:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/01/30/start-hackerrank/</guid>
      <description>友達に、HackerRankやってみるといいよと言われたので、始めてみました
 HackerRank
https://www.hackerrank.com/  自分のプロフィールはこれ。。。
まだC++の問題を２問解いただけだけど
https://www.hackerrank.com/haruka_sao
履歴のために、自分の解いたコードをGitHubにアップしたりして…
https://github.com/h-sao/HackerRank/
ランクによってバッチが付きます
ふーん。。HackerRank、こんな感じで解いていくとバッチが付くのか～実績解除していく感じやな pic.twitter.com/AM6d7s6rUU
&amp;mdash; 遥佐保 (@hr_sao) January 28, 2022 
バッチは Language Proficiency でポイントを稼ぐとスターが付いていく方式です
 10 ポイントで 1 Star（Bronze） &amp;hellip;
 250 ポイントで 5 Star（Gold）
  最初に触ってみたのは c++ Language Proficiency Badges だったのですが
どう考えても面白くないというか、C++もう業務で何年も使えてるので
言語のほうは余暇で楽しむとして、アルゴリズム問題のほうを頑張っていこかなと思います
Problem Solving Badges は
 1 Star - Bronze 30 2 Star - Bronze 100 3 Star - Silver 200 4 Star - Silver 475 5 Star - Gold 850 6 Star - Gold 2200  こんな感じ…</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] Advent Calendarへの参加履歴 2010-2021</title>
      <link>https://h-sao.com/blog/2021/12/26/summary-adventcalentar-from2010-to2021/</link>
      <pubDate>Sun, 26 Dec 2021 01:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2021/12/26/summary-adventcalentar-from2010-to2021/</guid>
      <description>自分メモです
過去に参加した C++ Advent Calendar の自分の記事のリンク
C++ Advent Calendar jp 2010  [C++]高速化について思うところ
https://h-sao.com/blog/2011/01/01/think-about-sppding-up-cpp/  Boost Advent Calendar 2011  [Boost/WinRT]Windows8のメトロスタイルアプリでBoost！
http://blog.livedoor.jp/haruka_sao/archives/51954974.html  C++ Advent Calendar jp 2012  [C++]VisualStudio2012とTaskとAMPの入門
http://blog.livedoor.jp/haruka_sao/archives/52015184.html  C++ Advent Calendar 2013  [C++]VisualStudio2013NovCTP：C++17(予定)resumable/await紹介
http://blog.livedoor.jp/haruka_sao/archives/52056922.html  C++ Advent Calendar 2021  [C++] Modulesのコンパイル（MSVC ver）とBMIについて
https://h-sao.com/blog/2021/12/01/about-cpp-modules/  意外と参加してました。。。
こうやって記録に残すのは、なんだか気分が良いですね</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] Modulesのコンパイル（MSVC ver）とBMIについて</title>
      <link>https://h-sao.com/blog/2021/12/01/about-cpp-modules/</link>
      <pubDate>Wed, 01 Dec 2021 00:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2021/12/01/about-cpp-modules/</guid>
      <description>この記事は C++ Advent Calendar 2021 1日目（初日！）の記事です。
 少し前からC++に Modules がやってきました
C++20 対応のメジャーどころのコンパイラ（MSVC/gcc/Clang など）で使うことができます
個人的にはビックウェーブが来たーーーと思ってまして、つねづねポチポチと Modules について調べていました
それを少しまとめたいと思います
モジュールの説明 昔ながらのプリコンパイルヘッダの概念を、今風にした感じでしょうか
ヘッダファイルをインクルードしていたものを Modules に置き換えることが出来ます
ヘッダファイルだと、
インクルードの順番に気を付けたり
コンパイル時間が長くなったり
インクルードガード書いたりと
ゆーてローテク文字列だったのですが、
それがバイナリとして公式に提供されました
Modulesを記載するファイル 各コンパイラによって（推奨）拡張子が異なります
 MSVC (cl.exe)
 Foo.ixx
  Clang
 Foo.cppm  GCC
 Foo.cc Foo.cp Foo.cxx Foo.cpp Foo.c++ Foo.C   （参考）
 MSVC
Overview of modules in C++ GCC
GCC and File Extensions - Development with GNU/Linux https://blog.</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] 実行環境の差異によるintワーニングが出ない書き方</title>
      <link>https://h-sao.com/blog/2020/10/02/fixed-a-diffrent-cpp-runtime-env-causing-a-int-warning/</link>
      <pubDate>Fri, 02 Oct 2020 05:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2020/10/02/fixed-a-diffrent-cpp-runtime-env-causing-a-int-warning/</guid>
      <description>C++のワーニングを放置していたのですが、そっと @srz_zumix さんが教えてくれてました
忘れないうちに&amp;rdquo;φ(・ェ・o)~メモメモ
x86環境とx64環境が混在してる場合にエラーが出やすい こんなやつとか出ます…
1 2 3 4 5 6  // Warning が出る例 std::vector&amp;lt;int&amp;gt; my_vec = { 0, 42 }; uint32_t max_loop_counter = my_vec.size(); // ←ここね uint32_t counter = 0; // 以下、counter を max_loop_counter までなんらかの処理    これは x86環境だと warning は出ないのですが x64 環境想定でコンパイルすると、ワーニングが出ます
 (Clangの例)
warning: Implicit conversion loses integer precision: &amp;lsquo;std::__1::vector&amp;gt;::size_type&amp;rsquo; (aka &amp;lsquo;unsigned long&amp;rsquo;) to &amp;lsquo;u_int32_t&amp;rsquo; (aka &amp;lsquo;unsigned int&amp;rsquo;) [-Wshorten-64-to-32]
 (￣□￣;
ええ、ええ、判っていますとも…
int 型が処理系によって異なるのは…</description>
    </item>
    
    <item>
      <title>[c&#43;&#43;] 2次元配列的な書き方</title>
      <link>https://h-sao.com/blog/2020/05/08/cpp-2-dimensional-array/</link>
      <pubDate>Fri, 08 May 2020 15:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2020/05/08/cpp-2-dimensional-array/</guid>
      <description>自分メモ
2次元配列 C++11 以前では、2次元配列はこんな感じで書いていました
1 2 3 4 5 6  // 2-dimensional array (raw type) constexpr static float xy_raw[][2] = { { 0.f, 10.f} // 0  , { 20.f, 30.f} // 1  , { 40.f, 50.f} // 2 };    これでも悪くは無いのですが、生配列を扱うと範囲外アクセスに気が付かない可能性が出てきます そこで C++11 から境界チェックが出来る配列の std::array が登場しました
これを使えば、C-styleの配列のノリで扱うことが可能です
 std::array - cpprefjp
https://cpprefjp.github.io/reference/array/array.html  さらに2次元配列にしたければ std::array を std::vector に入れることで実現可能です
1 2 3 4 5 6  // 2-dimensional array (using stl) const std::vector&amp;lt;std::array&amp;lt;float, 2&amp;gt;&amp;gt; xy_array = { { 0.</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] std::optionalの使い方を紹介しました</title>
      <link>https://h-sao.com/blog/2019/03/27/how-to-use-optional-nakamecpp-vol13/</link>
      <pubDate>Wed, 27 Mar 2019 23:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2019/03/27/how-to-use-optional-nakamecpp-vol13/</guid>
      <description>少し前ですが、std::optional について nakameguro_feature.cpp vol.13 で発表したので、その資料を置いときます
 nakameguro_feature.cpp vol.13
https://ebisu-effective-modern-cpp.connpass.com/event/111469/
   私的感想としては、optional を使うと
値取得に失敗しても、例外を書くことなく if で処理出来る のが、なんだか良いなぁと思った次第でした
あと、optional の無効状態をどう表すか？
reset() / std::nullopt / {} のどれよ？
という話は、参加者の人たちの意見も GitHub の検索結果と同じで
reset() に軍配があがっていました(&amp;lsquo;ω&amp;rsquo;)
こういう意見交換の場は、本当に恵まれてるなぁ～しみじみ
次回は 3 / 28 (木)開催で、vol.18 です！
 nakameguro_feature.cpp vol.18
https://ebisu-effective-modern-cpp.connpass.com/event/125272/
  お時間ある方は、ぜひお立ち寄りください～！</description>
    </item>
    
    <item>
      <title>[Android] 謎のエラー「Unable to start debugging.」が出たときの対応</title>
      <link>https://h-sao.com/blog/2017/08/18/how-to-fixed-error-unable-to-start-debugging/</link>
      <pubDate>Fri, 18 Aug 2017 18:40:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/08/18/how-to-fixed-error-unable-to-start-debugging/</guid>
      <description>Androidデバッグで実行時エラー 環境
 Windows10 x64 Visual Studio 2017 Project type: Native-Activity Application (Android)  ある時…Visual Studio で作っている Android プロジェクトが、実行時エラーになりました
 Unable to start debugging. Check your debugger settings by opening project properties and navigating to &amp;lsquo;Configuration Properties&amp;ndash;&amp;gt; Debugging&amp;rsquo;
 デバック出来ないからね！プロジェクトの設定見てね！的な意味みたいですが
デバッグモードで動かしてるし…
一体どこの何の事を言ってるのか判らない…＞＜。
リリースモードならOKなのかしら？と思っても、同様のエラー&amp;rdquo;(-&amp;ldquo;&amp;rdquo;-)&amp;rdquo;
解決案（わたしはこれでは解決しませんでしたが） 検索しても、実のある回答は特に出てこず…
唯一、解決っぽいのが、NVIDIAさんのフォーラムに載ってました
 CodeWorks for Android 1R4: Unable to start debugging - NVIDIA DEVELOPER
https://devtalk.nvidia.com/default/topic/957019/codeworks-for-android-1r4-unable-to-start-debugging/  元ネタリンクはMicrosoftさんのGitHub情報みたいです
 MEF - GitHub Microsoft/VSProjectSystem
https://github.com/Microsoft/VSProjectSystem/blob/master/doc/overview/mef.md#mef-inside-visual-studio  簡単に言うと、VSの Developer Command Prompt を使って、キャッシュクリアしてみたら？というもの</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] VisualStusio2015でClangを使う設定</title>
      <link>https://h-sao.com/blog/2016/05/15/use-clang-on-visualstudio/</link>
      <pubDate>Sun, 15 May 2016 23:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/05/15/use-clang-on-visualstudio/</guid>
      <description>今日は Clang with Microsoft CodeGen の設定などについて、メモしておきます
先人たちが既に色々と試している内容と対して変わりませんが、そもそも日本語の情報も少ないので、何かの足しになればと思います
&amp;ldquo;Clang with Microsoft CodeGen&amp;rdquo; is here! 最近はすっかり、クロスプラットフォームやオープンソースに力を入れているマイクロソフト社のツールセットの中に、Clang対応ってのがあります
2015年の年末にですが、Clang が正式に Visual Studio 2015 Update1 で利用できるよ～
とVC++チームブログで発表されていました
 Clang with Microsoft CodeGen in VS 2015 Update 1 - Visual C++ Team Blog
https://blogs.msdn.microsoft.com/vcblog/2015/12/04/clang-with-microsoft-codegen-in-vs-2015-update-1/
 Clang with Microsoft CodeGen (March 2016) released- Visual C++ Team Blog
https://blogs.msdn.microsoft.com/vcblog/2016/03/31/clang-with-microsoft-codegen-march-2016-released/
  良いですねー(^^)
現在のVS2015には Clang with Microsoft CodeGen というツールセットが提供されており、目玉はなんといっても、Clang のデバックを Visual Studioのエディターで確認できるところでしょうか！
他にも、Clang でコンパイルしたobjと VC でコンパイルしたobjがリンクできるところもすごいです
既存資産をフル活用出来そうですね
 （2016/5/15現在、Visual Studio 2015 Update2 が最新です）</description>
    </item>
    
    <item>
      <title>[勉強会] ebisu_effective_modern.cpp vol.3やりますよ</title>
      <link>https://h-sao.com/blog/2016/03/27/information-ebisu-cpp-vol3/</link>
      <pubDate>Sun, 27 Mar 2016 20:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/03/27/information-ebisu-cpp-vol3/</guid>
      <description>ebisu_effective_modern.cppって？  
東京の恵比寿でC++について、みんなの意見を聞きながら本を読み進める勉強会を開いています
昔、大阪でC++の読書会を開催していたのですが、それが結構役に立って面白かったので、東京でも開催してみよう！と思い、始めてみました
 ebisu_effective_modern.cpp vol.3
2016/3/31 (木) 20:00-21:30 東京恵比寿
http://ebisu-effective-modern-cpp.connpass.com/event/29324/
 ちなみに大阪はこちらで絶賛開催中ですよ～！
大阪C++読書会
http://cpp-osaka.connpass.com/
  ネタが無いと勉強や会話もしずらいので、
「Effective Modern C ーC11/14プログラムを進化させる42項目」 を元に進めています
今回は、５章 右辺値参照、ムーブセマンティックス、完全転送 について…
前回の vol.2 では、基本的なムーブの動きを簡単に抑えた程度になったので、あまり深いところまでは進めませんでした
書籍の内容にぐいぐい追いつけるように頑張りますよ～
興味ある方はどうぞ、お気軽にお越しください(^^)/</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;11] 参考リンク情報</title>
      <link>https://h-sao.com/blog/2014/12/19/cpp11-link-note/</link>
      <pubDate>Fri, 19 Dec 2014 12:30:41 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2014/12/19/cpp11-link-note/</guid>
      <description>C++11について調べているときに参考になった情報源のメモ
 C++11/14/17 Features In VS 2015 Preview - Visual C++ Team Blog
http://blogs.msdn.com/b/vcblog/archive/2014/11/17/c-11-14-17-features-in-vs-2015-preview.aspx  VS2013とVS2015 previewで利用できる機能一覧が乗っている
 C++11 - the new ISO C++ standard　（和訳版）
http://　www32.ocn.ne.jp/~ons/text/CPP0xFAQ.html.ja (現在リンク切れ)
ビャーネさんのC++11に対するコメント
原文はこちら→http://www.stroustrup.com/C++11FAQ.html
 C++11 の機能 (Modern C++) のサポート
http://msdn.microsoft.com/ja-jp/library/hh567368.aspx
VC++でのC++11の機能一覧
  </description>
    </item>
    
    <item>
      <title>[C&#43;&#43;/CX] MVP Community Camp 2014大阪で「VC&#43;&#43;まわりの非同期処理」セッションしました</title>
      <link>https://h-sao.com/blog/2014/03/23/presentation-mvp-community-camp-osaka2014/</link>
      <pubDate>Sun, 23 Mar 2014 00:25:28 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2014/03/23/presentation-mvp-community-camp-osaka2014/</guid>
      <description>MVP Community Camp 2014大阪にて、VC++系のセッションをさせて頂きました
MVP Community Camp 2014大阪会場
http://atnd.org/event/E0024087 (リンク先は削除されている模様です)
当日利用した資料はこちら！
 
pptx版はこちら&amp;nbsp; ←セッション時の私的メモが欄外に載っています
PDF版はこちら
序盤はわたしの追体験発表みたいになってしまいました
同じような疑問を持っている人や、その人なりの解釈の手助けになる様であればと思って記載しています
後半部分は、VC++での非同期処理の触りだけになっていますが
非同期での例外や中断など、C++/CXのWIndowsストアアプリでは興味深い仕組みが色々あるので
この続きになる情報も、もっと自分なりに勉強して発信していきたいなー</description>
    </item>
    
    <item>
      <title>Anonymous Struct of C</title>
      <link>https://h-sao.com/blog/2014/02/24/c-anonymous-struct/</link>
      <pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://h-sao.com/blog/2014/02/24/c-anonymous-struct/</guid>
      <description>Hi,
It is very tedious to think about the name of a struct when you use to struct only once.
In such a case, Anonymous structure comes in handy.
It is assigned to the anonymous struct
1 2 3 4 5 6 7 8 9 10 11 12 13 14  struct{ char 1st_name[0x80]; char 2nd_name[0x80]; } name_tbl[] = { { &amp;#34;Isami&amp;#34;, &amp;#34;Kondou&amp;#34; }, { &amp;#34;Toshizo&amp;#34;, &amp;#34;Hijikata&amp;#34; }, { &amp;#34;Kogorou&amp;#34;, &amp;#34;Kathura&amp;#34; }, }; for( i = 0; i &amp;lt; sizeof( name_tbl ); i ++ ){ printf( &amp;#34;%s\n&amp;#34;, name_tbl[ i ].</description>
    </item>
    
    <item>
      <title>C,C&#43;&#43;,C&#43;&#43;/CLI sample program</title>
      <link>https://h-sao.com/blog/2014/01/31/cpp-sample-program/</link>
      <pubDate>Fri, 31 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://h-sao.com/blog/2014/01/31/cpp-sample-program/</guid>
      <description>Hi,
C program 1 2 3 4 5 6 7 8  c00.c #include &amp;lt;stdio.h&amp;gt; int main() { printf(&amp;#34;This is a native C program.\n&amp;#34;); return 0; }    compile
&amp;gt; cl.exe c00.c  C++ program 1 2 3 4 5 6 7 8  c01.cpp #include &amp;lt;iostream&amp;gt; int main() { std::cout &amp;lt;&amp;lt; &amp;#34;This is a native C++ program.&amp;#34; &amp;lt;&amp;lt; std::endl; return 0; }    compile</description>
    </item>
    
    <item>
      <title>Lightning Talk:How to program C&#43;&#43;/CX</title>
      <link>https://h-sao.com/blog/2014/01/29/how-to-program-cppcx/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://h-sao.com/blog/2014/01/29/how-to-program-cppcx/</guid>
      <description>Hi,
The other day, I spoke about C++/CX in Lightning Talk.
Click here for article
PPTX-How to program c++/CX
PDF -How to program c++/CX
Take care!</description>
    </item>
    
    <item>
      <title>[C&#43;&#43;] 高速化について思うところ</title>
      <link>https://h-sao.com/blog/2011/01/01/think-about-sppding-up-cpp/</link>
      <pubDate>Sat, 01 Jan 2011 23:50:42 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2011/01/01/think-about-sppding-up-cpp/</guid>
      <description>明けましておめでとうございます♪
遥佐保（はるか・さお）です
2011年もどうぞ、よろしくお願いします
これは C++ Advent Calendar jp 2010 (http://atnd.org/events/10573) への26日目（補欠１号！）の参加記事です
C++の仕様やBoostについては全然詳しくないので、、すみません
C++でのゲーム作成の時期が長かったので、高速化について、思うところを記載してみます
読み物として目を通して頂ければと思います
最初に。。
ゲームは結果を出せれば何でもアリな世界で
極端な話どんなに可動性に欠けても規格に則ってなくても
良い作品が出来ればそれでヨシ！という感じなので
有識者が見たら反感を買うコードがうじゃうじゃかもしれません
例えば、オブジェクトを生成するためには new するわけですが、new は知ってのとおり、１フレーム内で大量に処理するには時間がかかり過ぎるし、タイミングによっては最悪、確保出来ない場合（※）もあります
 （※）確保出来なかった場合どうなるのか？ですが、
優先順位を決めて確保の可否を判断したりします
自分がどうしても確保されなければならないOBJの場合
他の生きているOBJで優先順位の低いやつを探して
そのOBJを殺し、自分に新たに割り当てたりします
 そうなってくると、最初に予め new しておいて、それを使いまわすということになるのですが、そしたらコンストラクタやデストラクタに依存しない作りをルールにしておく必要があります
 // もしくは、デストラクタを明示的に自力で呼ぶルール
 全然事情の知らない人が、このルールだけを見たら
「C++のデストラクタは信用できないから使わないんだってさ、ばかじゃないの！？」
と言うかもしれないけど、ゲームはメモリ確保関連は動的に見えて、ほぼ静的なので
こりゃ仕方ない
そういうのって凄まじい試行錯誤から生み出された究極のソースコードなので、許してもらいたいです
↓↓例えばこんな例
1 2 3 4 5 6 7 8 9  // 最初に確保 void *p_mem = operator new( max_size * sizeof( WORK )); WORK *box = static_cast&amp;lt;WORK*&amp;gt;( p_mem ); for( i = 0; i &amp;lt; max_size; i ++ ){ new( &amp;amp;box[i] ) WORK(); } // 自分でデストラクタ呼び  box[i].</description>
    </item>
    
    <item>
      <title>[C/C&#43;&#43;] 割り算を使わないで割り算する方法</title>
      <link>https://h-sao.com/blog/2008/07/29/how-to-divide-without-division/</link>
      <pubDate>Tue, 29 Jul 2008 01:17:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2008/07/29/how-to-divide-without-division/</guid>
      <description>ビット・シフトの計算の練習問題＜上級編＞です
Q. 割り算をシフトと引き算のみで表現しなさい
A. 回答
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  // x / y = ans // x: 分子 // y: 分母 // ans:答え  ans = 0; while( x &amp;gt;= y ){ dammy = y; syou = 1; while( x &amp;gt;= dammy ){ // 割られる数を超えるまで割る数をシフト  dammy = dammy &amp;lt;&amp;lt; 1; syou = syou &amp;lt;&amp;lt; 1; } dammy = dammy &amp;gt;&amp;gt; 1; // 超える手前まで戻す  syou = syou &amp;gt;&amp;gt; 1; x = x - dammy; // 筆算  ans = ans + syou; // 答え  } printf( &amp;#34;%d ・・・%d\n&amp;#34;, ans, x );    新人研修などにどうでしょう？</description>
    </item>
    
  </channel>
</rss>