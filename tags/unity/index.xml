<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Effectiveさお</title>
    <link>https://h-sao.com/tags/unity/</link>
    <description>Recent content in Unity on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 26 Jul 2019 17:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://h-sao.com/tags/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[VisualStudio] Visual Studioで使う改行コードを指定する方法</title>
      <link>https://h-sao.com/blog/2019/07/26/how-to-keep-line-feed-code-by-visualstudio-2019/</link>
      <pubDate>Fri, 26 Jul 2019 17:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2019/07/26/how-to-keep-line-feed-code-by-visualstudio-2019/</guid>
      <description>環境
 Windows10 Visual Studio 2019 Unity 2018  元々これを調べたきっかけは、Unityで作ったプロジェクトファイルを開いたときに
改行コード に関する警告が必ず出ていたからです
 There are inconsistent line endings in the &amp;lsquo;Assets/Script/xxxxx.cs&amp;rsquo; script. Some are Mac OS X (UNIX) and some are Windows.
 Windowsで作業してたとしても、Unityのプロジェクトはで作られたソースコードは
改行コードが LF なんですよね
Visual Studio のデフォルトは CR+LF
それで改行コードが混じってますよ～とVSが警告出してくれてたんですね。。。
プロジェクト内では、Windows と macOS が入り乱れている状態なので
CR+LF に統一も出来ず
LFに統一するしかない…
そんなときは、.editorcongfig ファイルを作成するのがおススメです！
.editorcongfig ファイル [*] end_of_line = lf charset = utf-8-bom   end_of_line で改行コードを LF 指定にしています
あとUnityで日本語を扱うなら、Bom付きのUTF-8 が良いらしい（？）
 この.</description>
    </item>
    
    <item>
      <title>[Unity] エディタを開く前にUnityのバージョンを調べる方法</title>
      <link>https://h-sao.com/blog/2019/06/19/how-to-check-unity-version-without-open-project/</link>
      <pubDate>Wed, 19 Jun 2019 16:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2019/06/19/how-to-check-unity-version-without-open-project/</guid>
      <description>既存のUnityのプロジェクトを開くとき、バージョンを合わせて開きたいですよね、
開く前に！
そしたら事前にそのバージョンのUnityをダウンロードできますし！
そんなときはここのディレクトリを見ると良いです！
ProjectSettings &amp;gt; ProjectVersion.txt  バージョンがそのまんま書いています( ^^) _旦~~</description>
    </item>
    
    <item>
      <title>[Unity] Macのトラックパッドのみでシーンビューを動かす</title>
      <link>https://h-sao.com/blog/2018/08/19/unity-cameras-operation-not-using-mouse/</link>
      <pubDate>Sun, 19 Aug 2018 10:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2018/08/19/unity-cameras-operation-not-using-mouse/</guid>
      <description>動作環境
 Mac 上で Bootcamp してる Windows10 Unity2018  Unityのシーンビューを操作しようとして、トラックパッドだけで動かすやり方が判らなかったので、そのメモです
 // マウスが引っ越ししで、どこにあるか判らなくなった
  見たい Game object に F key で、オブジェクトにフォーカス option key とトラックパッド1本指で、回転 トラックパッド2本指で平行移動
（注視点の位置は一緒に移動します）  ちょっとやりにくいけど、出来ないよりマシかな( ..)φメモメモ</description>
    </item>
    
    <item>
      <title>[Unity] Unityのライセンス情報をアンインストールしたい</title>
      <link>https://h-sao.com/blog/2017/11/02/how-to-uninstall-unity-license-information/</link>
      <pubDate>Thu, 02 Nov 2017 09:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/11/02/how-to-uninstall-unity-license-information/</guid>
      <description>Unityをアンインストールしたけど、あれ？ライセンス情報が残ってる(?_?)
というのが調べたきっかけです
PCからUnityの情報を完全消去したいときの参考に
ライセンス情報 (Unity5.x系) ライセンスファイルは、Unityをアンインストールしても消えません＞＜
以下にライセンスファイル(.ulfファイル)が残っています
 C:/ProgramData/Unity/Unity_v5.x.ulf C:/Users/(username)/AppData/Local/VirtualStore/ProgramData/Unity/
（UACで C:/ProgramData/Unity/ へアクセス制限されてる時）  で…
確かに上記を消したら、アクティベーション情報は消えるのですが
Unityにログインしたユーザ情報は残ってる様です
キャッシュ的なものも消さないと、完全アンインストールにはならないみたい
その他、アンインストールで消えないディレクトリ  C:/Users/(username)/AppData/Local/Unity C:/Users/(username)/AppData/Roaming/Unity
上記２点には、エディタに関する何か？キャッシュ的な何か？が残っています
起動した際の、Unityプロジェクトの表示とか…
おそらくこの２つのディレクトリ以下に、ユーザ情報も入ってるみたいです
 C:/Users/(username)/AppData/RoamingLocalLow/Unity
この下もちょっとよく判らないですが、
このディレクトリ配下の「Asset Store-5.x」の下には
アセットストアからダウンロードしてきたパッケージファイルが入っていました
（.unitypackage）
  まとめ 逆の言い方をすると、
上に書いたディレクトリ４つ
 C:/ProgramData/Unity/ C:/Users/(username)/AppData/Local/Unity C:/Users/(username)/AppData/Roaming/Unity C:/Users/(username)/AppData/RoamingLocalLow/Unity  を消せば、Unityをアンインストールしなくても
ライセンス情報のリセット、ユーザ情報のリセットが可能でした
 もちろん
C:/Users/(username)/AppData/RoamingLocalLow/Unity/Asset Store-5.x
の下は、ライセンスファイルとは無関係みたいです
 Unity2017系は？ Unity2017 では、ライセンスディレクトリは同様で、ライセンスファイル名が
 Unity_lic.ulf  になってるみたいです
（消さないといけないディレクトリまでは、2017系では調べてないので、ごめんなさい）
参考：
 アクティベーションに関する FAQ - Unity公式
https://docs.unity3d.com/ja/current/Manual/ActivationFAQ.html(日本語)
https://docs.unity3d.com/Manual/ActivationFAQ.html(英語)
 Unityの再インストール - FreelyApps</description>
    </item>
    
    <item>
      <title>[Unity] エディタ上でゲーム実行中にエディタの色を変える</title>
      <link>https://h-sao.com/blog/2017/10/26/change-playmode-color-on-unity/</link>
      <pubDate>Thu, 26 Oct 2017 23:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/10/26/change-playmode-color-on-unity/</guid>
      <description>Unityエディタ上で、ゲームを実行中（再生中）に、色を変える設定です
// Unity的には「プレイモード」と呼ぶみたいです
 プレイモード時にエディターの色を変える - Unity公式チュートリアル動画 https://unity3d.com/jp/learn/tutorials/topics/tips/play-mode-editor-tint
  上記公式動画↑↑↑の 20秒～32秒くらいの間で、設定の操作を教えてくれてます
いちおここにも書いておくと
 Edit &amp;gt; Preferences &amp;gt; Colors &amp;gt; Playmode tint
 で実行中のエディタの色を変えることが出来ます
いつも、Unityをインストールして最初にやってるんだけど、
いつも忘れて結局調べてるので…(*ﾉωﾉ)</description>
    </item>
    
    <item>
      <title>[Unity] 常にカメラの前にSpriteを出す</title>
      <link>https://h-sao.com/blog/2017/06/21/unity-sprite-on-front-of-camera/</link>
      <pubDate>Wed, 21 Jun 2017 18:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/06/21/unity-sprite-on-front-of-camera/</guid>
      <description>Unityでカメラに追従して、前面にSpriteを出す方法 これ、本当は、カメラの子供として指定すればもっと簡単なんですけど…
testScript.transform.parent = Camera.main.transform  この場合、
カメラにアニメーションが付いてる時（メインカメラは固定ポジションのままの時）に
うまく乗せられなかったりして、
面倒だなーと思い、Update毎に自分で位置を更新することにしました
（変に親子関係があるのも、後で何か制限されたらやだなーとかとかもあり…）
以下を参考にしたら、簡単にカメラの前に表示するスプライトを簡単に表現できました
 カメラからの距離で求める錐台のサイズ
https://docs.unity3d.com/jp/540/Manual/FrustumSizeAtDistance.html  public class TestExecutor : MonoBehaviour { private Texture2D blackTexture; private SpriteRenderer testSprite; void Start() { // Create black texture blackTexture = new Texture2D(32, 32, TextureFormat.RGB24, false); blackTexture.SetPixel(0, 0, Color.white); blackTexture.Apply(); // Create Sprite var sprite = Sprite.Create( texture: blackTexture, rect: new Rect(0, 0, blackTexture.width, blackTexture.height), pivot: new Vector2(0.5f, 0.5f) ); // スクリプトからSprite生成 testSprite = new GameObject(&amp;quot;TestSprite&amp;quot;).</description>
    </item>
    
    <item>
      <title>[Unity] Unity用YEBISプラグインのお話してきました</title>
      <link>https://h-sao.com/blog/2016/08/09/prerelease-yebis-for-unity-beta/</link>
      <pubDate>Tue, 09 Aug 2016 18:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/08/09/prerelease-yebis-for-unity-beta/</guid>
      <description>たまには、仕事のお話を…
現在、Unityのプラグインを絶賛開発中で、わたしも少し関わらせて頂いてます
なんのプラグインかというと、ポストエフェクト処理がかけられる「YEBIS」というプロダクトのプラグイン化になります
今、ベータ版として期間限定のトライアルを出し中。。
 YEBIS for Unity (beta) ダウンロードサイト https://siliconstudio.github.io/YebisForUnityBeta/  あぁ、なんでUnityのアセットストアじゃないのかって…？
実は、「特濃！ゲーム開発塾５」というイベントでこのプラグインの話をしてきたのですが、ストアの申請が間に合わず…＞＜
とりあえず、GitHub Pagesに置いてます
（なので、アセットストアに公開するまでの、期間限定サイトです）
ちなみに、イベントURLはこれ
 特濃！ゲーム開発塾５
http://eventregist.com/e/tokunou5
https://www.facebook.com/IwateGameFactory/  岩手県盛岡市はIT支援がとても盛んらしく、こんなゲーム開発者向けのお祭りイベントがあるんですね~
わたしが参加した日程は 8月9日(火)
対象となる人はプログラマー、もしくはプログラムを将来仕事にしたい人向け
現在、DMM.comラボにてプロデューサをされている松本卓也さんがメイン講師をされました
わたしは３０分ほどセッション時間を頂き、このUnityプラグインのお話をさせて頂きました
発表に利用した資料はこれです
 ベータ版なので動作不安定な点がいくつもあるのですが、人柱的に試しても良いかなーという心優しい方は、トライしてみてくださいm(__)m
ちなみにドキュメントはこちら
 SiliconStudio/YEBIS-plugins - GitHub
https://github.com/SiliconStudio/YEBIS-plugins  トップは英語で書かれてますが、実は日本語のドキュメントしか今は無いです</description>
    </item>
    
    <item>
      <title>[Unity] PC実行時のWindowsサイズの設定の仕方＆起動時フック</title>
      <link>https://h-sao.com/blog/2016/05/08/change-unity-window-size/</link>
      <pubDate>Sun, 08 May 2016 14:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/05/08/change-unity-window-size/</guid>
      <description>Unityのバグなのか、わたしの使い方が悪いのか？
PC実行時のウィンドウサイズの設定が、思うようにできなかったので
その解決メモです
PCで実行したら全画面… Unityのプロジェクトファイルを新規作成して
 &amp;ldquo;File&amp;rdquo; → &amp;ldquo;Build &amp;amp; Run&amp;rdquo;
 を選択すると、ビルドが走り、実際に exe が実行されます
へぇ、画面解像度( Screen resolution )とか、ここで変えることが出来るんだ～
と思って解像度設定を変更し、&amp;rdquo;Play!&amp;rdquo; で起動させると、いちおう思ったサイズで起動することが出来ます
Unityプロジェクトに Plyaer Settings がある ユーザに毎回ウィンドウサイズを選択させるのも、なんだかねぇ…ということで、ちゃんと設定したいと思います
Unityのメニューの
 &amp;ldquo;File&amp;rdquo; → &amp;ldquo;Build Settings&amp;rdquo;
 Build Settings を選択すると、ビルドに関する設定が変更できるようです
下にある、&amp;rdquo;Player Settings&amp;rdquo; を選択すると、 インスペクタウィンドウが出ます
ここで、起動時の Player Settings が出来るようですが…
「Resolution」 の 「Default Is Full Screen」 のチェックボックスを外しましょう
ついでに、「Standalone Player Options」 の 「Display Resolution Dialog」 を　「Disable」　にしておきます
これで exe を実行するたびに 「FixSizeWindows Configuration」 は開かなくなります
「Resolution」 には、「Default Screen Width/Height」 がありますが、、、</description>
    </item>
    
    <item>
      <title>[Unity] 2D Spriteにシェーダーをかける</title>
      <link>https://h-sao.com/blog/2016/01/11/unity-shader-2dsprite/</link>
      <pubDate>Mon, 11 Jan 2016 18:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/01/11/unity-shader-2dsprite/</guid>
      <description>今年の初めに、「Game a Week」という開発手法がすごい！っと書きました
とりあえず、週に一度は成果物を公開する、の部分を真似してみようかなと
（やってみて気が付きましたが、実は1週間って、結構長いです）
今をトキメクGame Engine: Unity について、去年から触る機会があり、ポチポチとやっております
そしてこれは既知の情報ですが、先週は2Dスプライトにシンプルなグラデーションのシェーダーを適用してみました
やってみると判るのですが、Unity ではスプライトにシンプルシェーダーだけを適用しようと思っても出来なくて、
先に結論を書いておくと、スプライトとして扱う場合は必ず何かしらのテクスチャアセットが必要でした
そのメモと感想文になります
2016年1月11日現在、Unityのバージョンは 5.3.1 です
Unity のシェーダー言語：ShaderLab Unity のシェーダーは 「ShaderLab」 という Unity オリジナルのシェーダー言語で記載することになります
といっても HLSL のラッパーのような言語なので、Unity で使うときのお作法であり、Unity と シェーダーの仲介役の言語、と思って良いみたい
最小限の ShaderLab 最小限の ShaderLab の枠組みはこんな感じ
（これより削ると、エラーが出た）
// BG_shader.shader // 最小限の ShaderLab Shader &amp;quot;Custom/BG_shader&amp;quot; { SubShader { Pass {} } }  実際に、このカスタムシェーダーをマテリアルに適用するとこんな感じ
何もしないマテリアルを作ることが出来ました
シンプルなグラデーション 今回、ゲーム背景を単純なカラーグラデーションにしようと思ったので、そういうシンプルシェーダーを書いていきます
// BG_shader.shader // 黄色くグラデーションする Shader &amp;quot;Custom/BG_shader&amp;quot; { SubShader { Pass{ CGPROGRAM #pragma vertex vert #pragma fragment frag // VS2015のグラフィックデバックON #pragma enable_d3d11_debug_symbols struct VertexInput { float4 pos: POSITION; // 3D空間座標 float2 uv: TEXCOORD0; // テクスチャ座標 }; struct VertexOutput { float4 v: SV_POSITION; // 2D座標 float2 uv: TEXCOORD0; // テクスチャ座標 }; // 頂点 shader VertexOutput vert(VertexInput input) { VertexOutput output; output.</description>
    </item>
    
  </channel>
</rss>