<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Effectiveさお</title>
    <link>https://h-sao.com/tags/powershell/</link>
    <description>Recent content in Powershell on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 20 Oct 2017 19:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://h-sao.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[PowerShell] ZoneIDとPowerShellの実行ポリシー</title>
      <link>https://h-sao.com/blog/2017/10/20/zoneid_and_powershell_excutionpolicy/</link>
      <pubDate>Fri, 20 Oct 2017 19:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/10/20/zoneid_and_powershell_excutionpolicy/</guid>
      <description>PowerShellでちょっとしたツールを動かそうと思って、初歩的なところであれ？となったので、書いておきます
PowerShellの実行ポリシー（Execution Policy）は、
1  &amp;gt; Get-ExecutionPolicy   このコマンドで確認できます
Windows10のデフォルトでは Restricted になっていて、ps1 ファイルをコマンドライン上から実行することが出来ません
なので
1  &amp;gt; Set-ExecutionPolicy RemoteSigned   を実行して、 RemoteSigned にセキュリティポリシーを変更します
しかし、RemoteSigned になってることを確認したのに、
しかしなぜか、ps1 ファイルの実行時にセキュリティエラーとなってしまいました
なんだこれ（↓）は…？
1  セキュリティ エラー: PSSecurityException   なんでだろーと思ってたのですが、何てことはない
実行しようとしてた ps1 ファイルは、インターネット越しに入手したものでした
（自分のサイトから落としてきたんだけどね）
こんな感じ↓↓↓
どうやら、インターネット越しに入手したファイルには ZoneID というのが付与されるらしく
Windowsはローカルファイルと区別出来るようにしてくれてるんですね～
ローカルファイルとして扱いたい時には、ポチっと「ブロックの解除」を押せばOKです
ちゃんと、ps1 ファイルが動作するようになりました(^^♪
ZoneID…知らなかった…＞＜。
参考：
- WindowsでPowerShellスクリプトの実行セキュリティポリシーを変更する - @IT
http://www.atmarkit.co.jp/ait/articles/0805/16/news139.html</description>
    </item>
    
    <item>
      <title>[PowerShell] ファイル分割スクリプト</title>
      <link>https://h-sao.com/blog/2014/07/17/divide-file-using-powershell/</link>
      <pubDate>Thu, 17 Jul 2014 21:57:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2014/07/17/divide-file-using-powershell/</guid>
      <description>大きなファイルを分割する必要があって
めっちゃ困りましたけど、また PowerShell で解決しました
なかばやけくそ
＜sep.ps1＞
1 2 3 4 5 6 7 8 9 10 11 12 13 14  $my_path_name = &amp;#34;c:/tmp/&amp;#34; $my_file_name = &amp;#34;abc&amp;#34; $my_file_kind = &amp;#34;.log&amp;#34; $cut_num = 2000 # 切り取る行数  $my_file = $my_path_name + $my_file_name + $my_file_kind $count = 0; Get-Content $my_file -ReadCount $cut_num -Encoding UTF8 | ForEach-Object { $count ++ $cfs = &amp;#34;{0:D3}&amp;#34; -f $count; $_ &amp;gt; ($my_path_name+$my_file_name+&amp;#39;_&amp;#39;+$cfs+$my_file_kind) }   結果
あまり何も考えず、元ネタはこの方のブログですー</description>
    </item>
    
    <item>
      <title>[PowerShell] 連想配列をソートしてforeachで一個づつ取り出す</title>
      <link>https://h-sao.com/blog/2014/07/02/sort-arrays-and-retrieve-one-by-one-for-powershell/</link>
      <pubDate>Wed, 02 Jul 2014 17:46:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2014/07/02/sort-arrays-and-retrieve-one-by-one-for-powershell/</guid>
      <description>PowerShell で連想配列を用いた時のソート＆foreach のサンプルがなかなか探せなかったのでメモします
とある連想配列
PS C:\&amp;gt; $tbl = @{ &amp;gt;&amp;gt; k00 = &amp;quot;orange&amp;quot;; &amp;gt;&amp;gt; k01 = &amp;quot;peach&amp;quot;; &amp;gt;&amp;gt; k02 = &amp;quot;apple&amp;quot; &amp;gt;&amp;gt; }  出力は簡単
PS C:\&amp;gt; $tbl Name Value ---- ----- k01 peach k02 apple k00 orange  ソートの出力も簡単
PS C:\&amp;gt; $tbl.GetEnumerator() | Sort-Object Value Name Value ---- ----- k02 apple k00 orange k01 peach # もしくは PS C:\&amp;gt; $tbl.GetEnumerator() | sort Value Name Value ---- ----- k02 apple k00 orange k01 peach  これを一つづつ取り出して処理したい</description>
    </item>
    
    <item>
      <title>[PowerShell] 32bitと64bitの使い分け</title>
      <link>https://h-sao.com/blog/2014/04/19/about-powershell-x32-and-x64/</link>
      <pubDate>Sat, 19 Apr 2014 21:46:45 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2014/04/19/about-powershell-x32-and-x64/</guid>
      <description>PowerShellにはちゃんと 32bit版と 64bit版が備わっています
Windows2008 R2
Windows2012 R2
共に同じ場所にあります(~o~)
64bit版
C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
32bit版
C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe
デフォルトの64bitマシンであれば、コンソールで
&amp;gt; powershell  とすると、64bitモードが立ち上がります
これはどういうことかというと、64bitのアプリから使うライブラリなどは、64bitでないとダメってことです
何にはまったかというと、PowerShell から System.Data.OracleClient に接続するとき
たとえDBサーバが 64bit Oracle だったとしても
Oracle Client はデフォルトでは 32bit になっているようです
powershell から oracle に接続しようとしたときこんな感じになります
# アセンブリのロード [void][System.Reflection.Assembly]::LoadWithPartialName(&amp;quot;System.Data.OracleClient&amp;quot;) # 接続 $conn_str = &amp;quot;Data Source=saoDB;User ID=sao;Password=password;Integrated Security=false;&amp;quot; $ora_conn = New-Object System.Data.OracleClient.OracleConnection($conn_str) # インスタンス $ora_cmd = New-Object System.Data.OracleClient.OracleCommand $ora_cmd.Connection = $ora_conn # データベースに接続 $ora_conn.Open()  （参考）powerShellからOracleを使う（接続・切断）
http://harikofu.blog.fc2.com/blog-entry-114.html
このDB接続直後に、64bit のPowerShell だと
こんなエラーが出ます
&amp;quot;0&amp;quot; 個の引数を指定して &amp;quot;Open&amp;quot; を呼び出し中に例外が発生しました: &amp;quot;Oracle クライアント ライブラリを読み込もうとしましたが、BadImageFormatException が発行されました。この問題は、32 ビットの Oracle クライアント コンポーネントが インストールされている環境で 64 ビット モードを実行すると発生します。&amp;quot; 発生場所 行:1 文字:22 + $ora_conn.</description>
    </item>
    
  </channel>
</rss>