<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Effectiveさお</title>
    <link>https://h-sao.com/tags/git/</link>
    <description>Recent content in Git on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 27 Feb 2022 01:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://h-sao.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Git] </title>
      <link>https://h-sao.com/blog/2022/02/27/how-to-update-fork-repository-on-git/</link>
      <pubDate>Sun, 27 Feb 2022 01:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2022/02/27/how-to-update-fork-repository-on-git/</guid>
      <description>よくフォークしたリポジトリを最新化する方法を忘れては検索を繰り返してるので、いい加減自分のブログにメモしておきます
最初の fork 以降、フォーク元のリポジトリに追いつきたいとき
 自分のローカルのリポジトリに登録されているリモート情報を見てみる  $ git remote -v  わたしの実行結果はこんな感じ、まだフォーク元との関連はなし
$ git remote -v origin	https://github.com/h-sao/xxx.git (fetch) origin	https://github.com/h-sao/xxx.git (push)   フォーク元のURLを upstream に登録します  （フォーク元は zzz/xxx という名前で公開されている場合です）
$ git remote add upstream https://github.com/zzz/xxx.git  ちゃんと登録されてるかどうかは、さっきの git remote -v で確認します
$ git remote -v origin	https://github.com/h-sao/xxx.git (fetch) origin	https://github.com/h-sao/xxx.git (push) upstream	https://github.com/zzz/xxx.git (fetch) upstream	https://github.com/zzz/xxx.git (push)  upstream にフォーク元が登録されていますね
＜余談＞
 もし upstream の内容を間違って登録してしまったときは
$ git remote remove upstream</description>
    </item>
    
    <item>
      <title>[Git] Gitの歴史を書き換える関連</title>
      <link>https://h-sao.com/blog/2020/01/29/tips-about-git-history-changed/</link>
      <pubDate>Wed, 29 Jan 2020 16:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2020/01/29/tips-about-git-history-changed/</guid>
      <description>よくやらかすので自分メモ
事前準備 # 今いるブランチの確認 $ git branch # ブランチに移動 $ git checkout feature/xxxxx  PR出す前、きれいな環境にしたいなどで整えておきたいこと
# 手動ブランチの取得/追従 $ git checkout feature/yyyyy $ git pull  ローカル作業全てを無かったことにする git fetch origin git reset --hard origin/master  pushしてしまった歴史を書き換える # 自分の名前のコミットを検索 $ git log --committer=&amp;quot;Sao Haruka&amp;quot; # ↑の gitlog より戻りたいハッシュ値を探す $ git reset [戻りたいコミットのハッシュ値] --hard # 強制push $ git push -f origin feature/xxxxx  既に feature/xxxxx で誰かが作業していたら強制プッシュはあきらめる
不要になったブランチを削除する 要らないブランチは削除しとく
$ git push --delete origin feature/xxxxx  PRに不要なコミットが混じる 原因：</description>
    </item>
    
    <item>
      <title>[Git] Commit&amp;PushしてしまったAuthor情報を変更したい</title>
      <link>https://h-sao.com/blog/2019/10/15/how-to-fix-git-author/</link>
      <pubDate>Tue, 15 Oct 2019 12:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2019/10/15/how-to-fix-git-author/</guid>
      <description>最近、GitKraken を使って更新をしています
Pro バージョンだとアカウント情報の切り替えが簡単に出来るので
会社用や個人用に切り替えて作業するのがとても便利です
しかしたまに切り替え忘れて、本来のアカウントじゃないやつでコミットしてしまって
意図しないメアドやユーザ名が入ったりして…(-&amp;ldquo;-;A &amp;hellip;アセアセ
そんなときの変更の方法です
Author 変更方法 直前のコミットを変更したい場合です
$ git commit --amend  を使うと、コミット履歴が書き換えられるんですけど
これで書き換えると、コミットの作者（Author）は変わらず、コミッター（Commiter）が変わるだけです
Authorを書き換えるには
$ git commit --amend --author=&amp;quot;Sao Haruka &amp;lt;sao@tmp.com&amp;gt;&amp;quot;  こうすると書き換わります
こんな感じね↓↓↓
1 2 3 4  $ git commit --amend --author=&amp;#34;Sao Haruka &amp;lt;sao@tmp.com&amp;gt;&amp;#34; [feature/xxxxx 9999999999] [WIP] Added hogehoge Date: Thu Oct 10 22:30:00 2019 +0900 1 files changed, 1 insertions(+), 1 deletions(-)   書き換わったー！
サーバーに push しちゃってるとき もし自分だけの作業ブランチでやってるのであれば、サーバーの履歴を強制的に書き換えることが出来ます
（共通ブランチでは、強制書き換えはやめよう）</description>
    </item>
    
    <item>
      <title>[Git] Visual Studio 2019の中のGitコマンドを探せ！</title>
      <link>https://h-sao.com/blog/2019/06/20/where-is-git-exe-on-vs2019/</link>
      <pubDate>Thu, 20 Jun 2019 16:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2019/06/20/where-is-git-exe-on-vs2019/</guid>
      <description>Gitクライアント…
自然に入ってますよね、わざわざ入れなくても。。。( *´艸｀)
Visual Studio 2019 が入ってる環境だったので、Gitクライアントくらいあるじゃろーと思って、検索してみたらありました！
わたしの場合の環境は、ここ↓↓↓
 C:\Program Files (x86)
\Microsoft Visual Studio
\2019
\Enterprise
\Common7
\IDE
\CommonExtensions
\Microsoft
\TeamFoundation
\Team Explorer
\Git
\cmd
\git.exe
 C:\dev&amp;gt;&amp;quot;C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer\Git\cmd\git.exe&amp;quot; --version git version 2.21.0.windows.1 C:\dev&amp;gt;  バージョンもそこそこ新しいです！
パス長いけど、これ使うか～( ^^) _旦~~</description>
    </item>
    
    <item>
      <title>[SSH] ポート指定GitサーバにSSHでアクセスできない時(Windows/GitExtensions)</title>
      <link>https://h-sao.com/blog/2017/06/01/when-cant-connect-to-git-server-for-ssh-on-windows-gitextensions/</link>
      <pubDate>Thu, 01 Jun 2017 18:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/06/01/when-cant-connect-to-git-server-for-ssh-on-windows-gitextensions/</guid>
      <description>最近… 機械学習関係をやってたんですけど、Unityをまた触ることになっています
てんやわんやして、前回更新から2カ月も経ってしまった…(+o+)
今回また、タイトル名のGit/SSH関係でオロオロしたので、同現象で困ってる人の助けになれば幸いです
(現象)初回SSH接続に失敗する 環境  Windows7/64bit GitExtensions キーペアを用いた認証でのSSH接続 GitサーバへのSSHアクセスは、オリジナルのポート番号を割り当てている  こんな環境で作業していました（古いPCからアクセスしたかったので、Win7なのです…）
 初回クローンするために、Gitサーバにアクセスしようと、秘密鍵を .ssh ディレクトリ以下にコピーしておきます
デフォルトのSSH秘密鍵置き場は
c:\Users[ユーザ名].ssh/id_rsa
です
 GitExtensionsを利用してGitリポジトリからクローンしようとすると、以下のエラーが…
   fatal: Could not read from remote repository.
Please make sure you have the correct access rights and repository exists.
 え、なんで…？
(解決)ポート番号ありでknown_hostsに登録する アドレスも合ってる！
リポジトリもある！
サーバには公開鍵、クライアントには秘密鍵を置いてる！
これでなぜアクセス出来ないのか、解明に半日かかってしまいました…トホホ
自分のインフラ力の無さに涙が出そうです
答えを書きますと、
 先にコマンドプロンプトからSSHアクセスを行っておく ポート番号の指定がある場合は、ポート番号指定でアクセスしておく  これで解決しました…(^_^;)
わたしの場合のポイントは、ポート指定でした
 コマンドプロンプトを立ち上げます
わたしの場合、GitExtensionsを使ってたので Tools &amp;gt; Git bash から立ち上げました
 SSH のテスト接続を行います</description>
    </item>
    
    <item>
      <title>[SSH] 複数キー接続のconfig記載について</title>
      <link>https://h-sao.com/blog/2016/05/09/add-ssh-config-for-git/</link>
      <pubDate>Mon, 09 May 2016 23:30:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/05/09/add-ssh-config-for-git/</guid>
      <description>前回、
[Git] Gitで利用するsshキーペアの作成、ssh接続、複数ID接続
で Gitサーバにアクセスするための ssh 接続について記載しました
その追記メモです
.\.ssh\config ファイルに記載する内容 Git アクセス に ssh を利用する際に、複数アカウントを利用したい
つまり、複数 ssh キーを利用したい
という場合についてです
もし、利用するキーの名前が id_rsa であれば
これはデフォルトで認識される名前なので、わざわざ .\.ssh\config ファイルに記載しなくても接続OKでした
つまり例えば、
 元々 社内用 Git サーバのアクセスに id_rsa を利用していた 追加で、GitHub にアクセスするキー（github_rsa など別名称）を作成した  こんな場合があったとします
.\.ssh\config ファイルに記載する内容は 2. の github_rsa のものだけでOKです
もちろん、 1. の id_rsa を書いても問題ないですし、コンフィグにちゃんと記載されている方が、後々判りやすいと思いますが
無理に config に追記しなくてもわたしの環境では問題なく接続できました
参考までに～(^^)/</description>
    </item>
    
    <item>
      <title>[Git] Gitで利用するsshキーペアの作成、ssh接続、複数ID接続</title>
      <link>https://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</link>
      <pubDate>Sat, 07 May 2016 15:23:30 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</guid>
      <description>しょっちゅう作っては、作り方を忘れ、また検索で調べる…ということをしているので、sshキーの生成&amp;amp;接続について、忘れないようにメモしておきます
GitサーバへSSHキーを使って接続したい Gitサーバに接続するには、
 http ssh  この2種類の接続方法があるみたいです
Git接続用のクライアントアプリは、どっちで接続するか選択できるものもあるので
Sourcetreeなどを使っていると、あまり認識してない人もいるかもしれません
今回、こんなクライアント環境で試しました
 自端末：Windows10 x64 Gitサーバ：GitHub Gitクライアントアプリ：GitExtensions Gitアクセスには、複数アカウントを利用している  これを試そうと思ったモチベーションは、push のたびに IDとパスワードを毎回聞かれるのがやだ、だからキーペアを利用して ssh アクセスにするんだー
というところから始まってます
GitHub のIDとパスワードをスキップして、セキュアアクセスするのだ！という方の参考になればと思います！
 あと、番外編として、 非推奨ですが https アクセスでIDとパスワードを毎回聞かれないようにする方法も最後にメモしておきます
 キーの生成方法 ssh-keygen ここは普通に
公開鍵と秘密鍵を作ればいいだけなので、知ってる人に取ったら何をいまさら…になりますが、一応メモ
Gitがインストールされているなら ssh-keygen が使えますので、コマンドを打つだけ
(コマンドを打たなくても、Gitのクライアントアプリが勝手にやってくれる場合もあります)
GitBash などを起動します
コマンドはこちら
$ ssh-keygen -t rsa  基本的には、何か聞かれてもエンターで進めばOKです
デフォルトでは c:\Users\[ユーザ名]\.ssh\** 以下に秘密鍵（id_rsa）と公開鍵（id_rsa.pub）**のキーペアが作成されます
Windowsだとキーの保存位置は c:\Users\[ユーザ名]\.ssh\ にしないといけません
わたしは、Github用のキーだと判るように、名前を github_rsa として作成しました
（既に別の用途で id_rsa を使っているからです、つまり複数アカウントを利用しています）
実行結果はこれ↓↓↓
(SHA256以下の箇所は、適当に x で書き換えています) haruka.sao@MyPC MINGW64 ~ $ ssh-keygen -t rsa Generating public/private rsa key pair.</description>
    </item>
    
    <item>
      <title>[GitExtensions] 行単位で変更をリセットするRコマンド</title>
      <link>https://h-sao.com/blog/2015/03/03/reset-line-to-gitextensions/</link>
      <pubDate>Tue, 03 Mar 2015 22:00:28 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2015/03/03/reset-line-to-gitextensions/</guid>
      <description>GitExtensions を使ってみました
 http://gitextensions.github.io/  GitExtensions では、commit 時に、行を選択して
その選択部分だけをリセットする（コミット前に合わせる）という機能があります
 Commit - Git Extensions 2.48 documentation
http://git-extensions-documentation.readthedocs.org/en/latest/commit.html  以下↓↓↓のような適当なファイルがコミットされていたとします
ファイルの下に、変更を追加してみました
Giet Extensionsを見ると、ファイルが変更されたので、Commit(1) になっています
差分は、以下のような感じ
追加した 「20」、 「100&amp;hellip;」 の数字が、緑色の変更分として表れていますね
実は、これは作成中のプログラムなどで、
「100&amp;hellip;」 の部分は、Commit には不要だったとします
そこで、以下のように、Commit には不要だなと思った部分を選択して [R] キーを押してみます
以下↓↓↓のような感じで、ここの行消してもいいの？と聞いてくれます
「はい」にすると、元のファイルから、選択した行を削除してくれます
この動作は、Commitした/しないに関わらず、元ファイルに反映されます
「はい」を押したあとのファイルの状態↓↓↓
あぁーあそこ、削除しとかなきゃ。。。
というときに、元ファイルに戻ってから、再度コミットする、
という手間が省けます
便利やね(^^)/</description>
    </item>
    
    <item>
      <title>[Git] ローカルを強制上書きして、作業をなかったことにしたい</title>
      <link>https://h-sao.com/blog/2014/02/03/force-reset-my-git-repository/</link>
      <pubDate>Mon, 03 Feb 2014 18:54:41 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2014/02/03/force-reset-my-git-repository/</guid>
      <description>ローカルの作業が何やらおかしくなったから
リモートのファイル内容に戻したい～という時
以下のコマンドでさくっと戻りました
1 2  git fetch origin git reset --hard origin/master    ツールなどで強制的にsyncさせようとしても
 failed to sync this branch
 という悲しいお知らせが出て、結局 Git Bash に行くことになりますので……
（参考リンク）
 gitでリモートのブランチにローカルを強制一致させたい時
http://qiita.com/ms2sato/items/72b48c1b1923beb1e186
 How to reset my local repository to be just like the remote repository HEAD
http://stackoverflow.com/questions/1628088/how-to-reset-my-local-repository-to-be-just-like-the-remote-repository-head
  </description>
    </item>
    
  </channel>
</rss>