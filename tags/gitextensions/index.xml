<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gitextensions on Effectiveさお</title>
    <link>https://h-sao.com/tags/gitextensions/</link>
    <description>Recent content in Gitextensions on Effectiveさお</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 01 Jun 2017 18:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://h-sao.com/tags/gitextensions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[SSH] ポート指定GitサーバにSSHでアクセスできない時(Windows/GitExtensions)</title>
      <link>https://h-sao.com/blog/2017/06/01/when-cant-connect-to-git-server-for-ssh-on-windows-gitextensions/</link>
      <pubDate>Thu, 01 Jun 2017 18:00:00 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2017/06/01/when-cant-connect-to-git-server-for-ssh-on-windows-gitextensions/</guid>
      <description>最近… 機械学習関係をやってたんですけど、Unityをまた触ることになっています
てんやわんやして、前回更新から2カ月も経ってしまった…(+o+)
今回また、タイトル名のGit/SSH関係でオロオロしたので、同現象で困ってる人の助けになれば幸いです
(現象)初回SSH接続に失敗する 環境  Windows7/64bit GitExtensions キーペアを用いた認証でのSSH接続 GitサーバへのSSHアクセスは、オリジナルのポート番号を割り当てている  こんな環境で作業していました（古いPCからアクセスしたかったので、Win7なのです…）
 初回クローンするために、Gitサーバにアクセスしようと、秘密鍵を .ssh ディレクトリ以下にコピーしておきます
デフォルトのSSH秘密鍵置き場は
c:\Users[ユーザ名].ssh/id_rsa
です
 GitExtensionsを利用してGitリポジトリからクローンしようとすると、以下のエラーが…
   fatal: Could not read from remote repository.
Please make sure you have the correct access rights and repository exists.
 え、なんで…？
(解決)ポート番号ありでknown_hostsに登録する アドレスも合ってる！
リポジトリもある！
サーバには公開鍵、クライアントには秘密鍵を置いてる！
これでなぜアクセス出来ないのか、解明に半日かかってしまいました…トホホ
自分のインフラ力の無さに涙が出そうです
答えを書きますと、
 先にコマンドプロンプトからSSHアクセスを行っておく ポート番号の指定がある場合は、ポート番号指定でアクセスしておく  これで解決しました…(^_^;)
わたしの場合のポイントは、ポート指定でした
 コマンドプロンプトを立ち上げます
わたしの場合、GitExtensionsを使ってたので Tools &amp;gt; Git bash から立ち上げました
 SSH のテスト接続を行います</description>
    </item>
    
    <item>
      <title>[Git] Gitで利用するsshキーペアの作成、ssh接続、複数ID接続</title>
      <link>https://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</link>
      <pubDate>Sat, 07 May 2016 15:23:30 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2016/05/07/generate-ssh-key-for-github/</guid>
      <description>しょっちゅう作っては、作り方を忘れ、また検索で調べる…ということをしているので、sshキーの生成&amp;amp;接続について、忘れないようにメモしておきます
GitサーバへSSHキーを使って接続したい Gitサーバに接続するには、
 http ssh  この2種類の接続方法があるみたいです
Git接続用のクライアントアプリは、どっちで接続するか選択できるものもあるので
Sourcetreeなどを使っていると、あまり認識してない人もいるかもしれません
今回、こんなクライアント環境で試しました
 自端末：Windows10 x64 Gitサーバ：GitHub Gitクライアントアプリ：GitExtensions Gitアクセスには、複数アカウントを利用している  これを試そうと思ったモチベーションは、push のたびに IDとパスワードを毎回聞かれるのがやだ、だからキーペアを利用して ssh アクセスにするんだー
というところから始まってます
GitHub のIDとパスワードをスキップして、セキュアアクセスするのだ！という方の参考になればと思います！
 あと、番外編として、 非推奨ですが https アクセスでIDとパスワードを毎回聞かれないようにする方法も最後にメモしておきます
 キーの生成方法 ssh-keygen ここは普通に
公開鍵と秘密鍵を作ればいいだけなので、知ってる人に取ったら何をいまさら…になりますが、一応メモ
Gitがインストールされているなら ssh-keygen が使えますので、コマンドを打つだけ
(コマンドを打たなくても、Gitのクライアントアプリが勝手にやってくれる場合もあります)
GitBash などを起動します
コマンドはこちら
$ ssh-keygen -t rsa  基本的には、何か聞かれてもエンターで進めばOKです
デフォルトでは c:\Users\[ユーザ名]\.ssh\** 以下に秘密鍵（id_rsa）と公開鍵（id_rsa.pub）**のキーペアが作成されます
Windowsだとキーの保存位置は c:\Users\[ユーザ名]\.ssh\ にしないといけません
わたしは、Github用のキーだと判るように、名前を github_rsa として作成しました
（既に別の用途で id_rsa を使っているからです、つまり複数アカウントを利用しています）
実行結果はこれ↓↓↓
(SHA256以下の箇所は、適当に x で書き換えています) haruka.sao@MyPC MINGW64 ~ $ ssh-keygen -t rsa Generating public/private rsa key pair.</description>
    </item>
    
    <item>
      <title>[GitExtensions] 行単位で変更をリセットするRコマンド</title>
      <link>https://h-sao.com/blog/2015/03/03/reset-line-to-gitextensions/</link>
      <pubDate>Tue, 03 Mar 2015 22:00:28 +0900</pubDate>
      
      <guid>https://h-sao.com/blog/2015/03/03/reset-line-to-gitextensions/</guid>
      <description>GitExtensions を使ってみました
 http://gitextensions.github.io/  GitExtensions では、commit 時に、行を選択して
その選択部分だけをリセットする（コミット前に合わせる）という機能があります
 Commit - Git Extensions 2.48 documentation
http://git-extensions-documentation.readthedocs.org/en/latest/commit.html  以下↓↓↓のような適当なファイルがコミットされていたとします
ファイルの下に、変更を追加してみました
Giet Extensionsを見ると、ファイルが変更されたので、Commit(1) になっています
差分は、以下のような感じ
追加した 「20」、 「100&amp;hellip;」 の数字が、緑色の変更分として表れていますね
実は、これは作成中のプログラムなどで、
「100&amp;hellip;」 の部分は、Commit には不要だったとします
そこで、以下のように、Commit には不要だなと思った部分を選択して [R] キーを押してみます
以下↓↓↓のような感じで、ここの行消してもいいの？と聞いてくれます
「はい」にすると、元のファイルから、選択した行を削除してくれます
この動作は、Commitした/しないに関わらず、元ファイルに反映されます
「はい」を押したあとのファイルの状態↓↓↓
あぁーあそこ、削除しとかなきゃ。。。
というときに、元ファイルに戻ってから、再度コミットする、
という手間が省けます
便利やね(^^)/</description>
    </item>
    
  </channel>
</rss>